name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  EXTENSION_NAME: 'paytracker-extension'

jobs:
  validate:
    name: Validate & Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: npm run security:audit
        continue-on-error: true

      - name: Validate manifest
        run: npm run manifest:validate

  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run ci:install

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run tests with coverage
        run: npm run ci:test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Extension
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifact-name: ${{ steps.version.outputs.artifact-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run ci:install

      - name: Update manifest version
        run: npm run manifest:version

      - name: Build extension
        run: npm run build

      - name: Get version info
        id: version
        run: |
          VERSION=$(npm pkg get version | tr -d '"')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "artifact-name=${{ env.EXTENSION_NAME }}-v$VERSION" >> $GITHUB_OUTPUT

      - name: Validate build output
        run: |
          echo "Checking build directory..."
          ls -la build/
          if [ ! -f "build/manifest.json" ]; then
            echo "Error: manifest.json not found in build directory"
            exit 1
          fi
          echo "Build validation passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build-${{ steps.version.outputs.version }}
          path: build/
          retention-days: 30

  package:
    name: Package Extension
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run ci:install

      - name: Build and package extension
        run: npm run ci:build

      - name: Verify package contents
        run: npm run package:verify

      - name: Upload packaged extension
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ${{ needs.build.outputs.artifact-name }}.zip
          retention-days: 90

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, package]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download packaged extension
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact-name }}

      - name: Extract version from tag
        id: tag-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            CHANGELOG_CONTENT=$(sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
            if [ -z "$CHANGELOG_CONTENT" ]; then
              CHANGELOG_CONTENT="Release version ${{ steps.tag-version.outputs.version }}"
            fi
          else
            CHANGELOG_CONTENT="Release version ${{ steps.tag-version.outputs.version }}"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.tag-version.outputs.version }}
          name: PayTracker Extension v${{ steps.tag-version.outputs.version }}
          body: |
            ## PayTracker Extension v${{ steps.tag-version.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ### Installation
            1. Download the `${{ needs.build.outputs.artifact-name }}.zip` file below
            2. Extract the contents
            3. Open Chrome and navigate to `chrome://extensions/`
            4. Enable "Developer mode"
            5. Click "Load unpacked" and select the extracted folder
            
            ### What's Changed
            See the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.build.outputs.version }}...v${{ steps.tag-version.outputs.version }}
          files: |
            ${{ needs.build.outputs.artifact-name }}.zip
          draft: false
          prerelease: ${{ contains(steps.tag-version.outputs.version, '-') }}
          generate_release_notes: true

  auto-version:
    name: Auto Version Bump
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip-version]') && !contains(github.event.head_commit.message, 'chore: bump version')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm run ci:install

      - name: Determine version bump type
        id: version-type
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"[major]"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
            echo "Detected major version bump"
          elif [[ "$COMMIT_MSG" == *"feat"* ]] || [[ "$COMMIT_MSG" == *"[minor]"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
            echo "Detected minor version bump"
          else
            echo "type=patch" >> $GITHUB_OUTPUT
            echo "Detected patch version bump"
          fi

      - name: Bump version and create tag
        run: npm run release:${{ steps.version-type.outputs.type }}

      - name: Push changes and tags
        run: git push --follow-tags

  manual-release:
    name: Manual Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm run ci:install

      - name: Create release
        run: npm run release:${{ github.event.inputs.release_type }}

      - name: Push changes and tags
        run: git push --follow-tags

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [validate, test, build, package]
    if: always()

    steps:
      - name: Notify on success
        if: needs.validate.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "‚úÖ CI/CD Pipeline completed successfully!"
          echo "üéâ Extension built and ready for deployment"
          echo "üì¶ Version: ${{ needs.build.outputs.version }}"

      - name: Notify on failure
        if: needs.validate.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "‚ùå CI/CD Pipeline failed!"
          echo "üîç Check the logs above for detailed error information"
          echo "üìã Failed jobs:"
          [ "${{ needs.validate.result }}" == "failure" ] && echo "  ‚Ä¢ Validation"
          [ "${{ needs.test.result }}" == "failure" ] && echo "  ‚Ä¢ Testing"
          [ "${{ needs.build.result }}" == "failure" ] && echo "  ‚Ä¢ Building"
          exit 1

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [package, release]
    if: always()

    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Keep only the 10 most recent artifacts
            const oldArtifacts = artifacts.artifacts
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(10);
              
            for (const artifact of oldArtifacts) {
              if (artifact.name.includes('extension-build-')) {
                console.log(`Deleting old artifact: ${artifact.name}`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }